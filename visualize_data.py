import marimo

__generated_with = "0.11.21"
app = marimo.App(width="medium")


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # How to use this notebook

        The cells in the notebook containing code and text will run automatically, but you can rerun cells or stop cells from running by clicking the play button or the stop (square) button in the top right corner of each cell. If the content of a cell is hidden, you can click on the eye in the middle of the cell that shows up when you hover your over it. If you want to make any changes to the code or the text, you can edit a cell's content and run it again.

        In marimo notebooks, the code in different cells are connected. Therefore, you cannot assign one variable name different values in different cells. In other words, you cannot overwrite variables that are defined elsewhere in the notebook. The exception is if you put an underscore ("_") in front of your variable name, e.g. _x = 2.
        """
    )
    return


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
        # Introduction to the Dataset

        This notebook can be used to explore the data from an experiment in the Allen Visual Coding dataset. For each mouse in the dataset, the activity of neurons in different areas of the brain was recorded with Neuropixels probes (Fig. A[<sup>1</sup>](#fn1) below). Neuropixels probes contain 384 electrodes distributed over a 1 mm long needle and can be inserted into the brain to record the electrical potential generated by neural activity. The experimental setup is illustrated in Fig. B[<sup>2</sup>](#fn1). Up to six Neuropixels probes were inserted and recorded while the mouse was presented different images.



        <span id="fn1"><sup>1</sup>Fig. A from: Jun, James J., et al. "Fully integrated silicon probes for high-density recording of neural activity." Nature 551.7679 (2017): 232-236. doi: https://doi.org/10.1038/nature24636 </span>

        <span id="fn1"><sup>2</sup>Fig. B from: Siegle, Joshua H., et al. "Survey of spiking in the mouse visual system reveals functional hierarchy." Nature 592.7852 (2021): 86-92. doi: https://doi.org/10.1038/s41586-020-03171-x</span>
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    _src = (
        "https://uni-bonn.sciebo.de/index.php/apps/files_sharing/ajax/publicpreview.php?x=3840&y=1125&a=true&file=Fig1.png&t=5WnLH70cf6aaEi7&scalingup=0"
    )
    mo.image(src=_src, width="600px", height="370px", rounded=True)
    return


@app.cell
def _():
    import pandas as pd
    import os
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib.colors as mcolors
    from cycler import cycler
    return cycler, mcolors, np, os, pd, plt, sns


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        ## Download data

        Run the cell below to download large files in the dataset.
        """
    )
    return


@app.cell(hide_code=True)
def _(os):
    import owncloud

    if not os.path.exists('data'):
        print('Creating directory for data')
        os.mkdir('data')
        os.mkdir('data/ses-715093703')
        os.mkdir('data/meta_data')

    if not os.path.exists('data/ses-715093703/units.parquet'):
        print('Downloading units data')
        owncloud.Client.from_public_link('https://uni-bonn.sciebo.de/s/y9FtA26NOUxVeTt').get_file('/', 'data/ses-715093703/units.parquet')
        print('Downloading units data finished')
    else:
        print('Session units data already downloaded')

    if not os.path.exists('data/meta_data/units.csv'):
        print('Downloading meta data')
        owncloud.Client.from_public_link('https://uni-bonn.sciebo.de/s/UUpOWgX8Chep9cZ').get_file('/', 'data/meta_data/units.csv')
        print('Downloading meta data finished')
    else:
        print('Units meta data already downloaded')
    return (owncloud,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        """
        ## Load session units data

        Run the cell below to load the data from all neurons (units) that were recorded and identified in the experiment.
        """
    )
    return


@app.cell
def _(os, pd):
    data_dir = 'data/ses-715093703'
    filename_units_ses = 'units.parquet'
    loadpath_ses = os.path.join(data_dir, filename_units_ses)
    units_ses = pd.read_parquet(loadpath_ses)
    return data_dir, filename_units_ses, loadpath_ses, units_ses


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""Adding column with the full names of each structure to the DataFrame.""")
    return


@app.cell
def _(units_ses):
    structure_full_names = {'APN': 'Anterior Pretectal Nucleus',
                           'DG': 'Dentate Gyrus', 
                           'CA1': 'Hippocampus Cornus Ammonis-1 (CA1)',
                           'VISam': 'Visual Cortex Anteromedial Area',
                           'grey': 'Grey Matter',
                           'VISpm': 'Visual Cortex Posteromedial Area',
                           'PO': 'Dentate Gyrus Polymorph layer',
                           'LP': 'Lateral Posterior (LP) Nucleus of Thalamus',
                           'PoT': 'Posterior Triangular Nucleus of Thalamus',
                           'VISp': 'Primary Visual Cortex (V1)',
                           'LGd': 'Dorsal Lateral Geniculate Nucleus (LGd) of Thalamus',
                           'CA3': 'Hippocampus Cornus Ammonis-3 (CA3)',
                           'VISl': 'Visual Cortex Lateromedial Area',
                           'VISrl': 'Visual Cortex Rostrolateral Area'}

    units_ses['structure_full_name'] = units_ses['structure_acronym'].map(structure_full_names)
    return (structure_full_names,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        ## Select brain area

        In the dropdown menu below, you can pick which part of the brain you want to investigate. 

        Note: if you see the error "NameError('name 'firing_rate_structures' is not defined')" below, it just means that you haven't selected an area from the dropdown menu yet.
        """
    )
    return


@app.cell
def _(mo, units_ses):
    multiselect_structure = mo.ui.multiselect.from_series(units_ses['structure_full_name'])
    multiselect_structure
    return (multiselect_structure,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        ### Plot average firing rate of neurons in selected areas

        The histogram below shows the distribution of firing rates of neurons in each selected area of the brain. The firing rate tells you how often a neuron fires an action potential per second.
        """
    )
    return


@app.cell
def _(multiselect_structure, pd, plt, sns, units_ses):

    # create list of full names of selected structures to be added to DataFrame with firing rates of selected structures
    names_selected_structures = []
    for structure_full_name in multiselect_structure.value:
        nunits_structure = (units_ses['structure_full_name'] == structure_full_name).sum()
        names_selected_structures.extend([structure_full_name]*nunits_structure)

    # create DataFrame with firing rates of selected structures
    for istructure, structure_name in enumerate(multiselect_structure.value):
        if istructure == 0:
            firing_rate_structures = units_ses[units_ses.structure_full_name == structure_name]['firing_rate']
        else:
            firing_rate_structures = pd.concat([firing_rate_structures, 
                                                units_ses[units_ses.structure_full_name == structure_name]['firing_rate']])
    firing_rate_structures = firing_rate_structures.to_frame()

    # add full names of selected structures to DataFrame
    firing_rate_structures['structure_full_name'] = names_selected_structures

    sns.histplot(firing_rate_structures, x= 'firing_rate', hue = 'structure_full_name', kde=True)
    plt.title('Average firing rate across different areas')
    plt.xlabel('Firing rate (Hz)')
    return (
        firing_rate_structures,
        istructure,
        names_selected_structures,
        nunits_structure,
        structure_full_name,
        structure_name,
    )


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        ### Make raster plots of spikes in selected areas

        Each tiny bar in this plot marks a neuron firing an action potential, or a spike, as it is also called. Here, you can compare the spiking activity of neurons recorded in different parts of the brain.
        """
    )
    return


@app.cell
def _(multiselect_structure, np, plt, units_ses):
    plt.figure(figsize = (6,6))

    # counter of nr. of units plotted to provide start point for plot of spikes in from next structure
    n_units_allstructs = 0

    for _istructure, _structure_name in enumerate(multiselect_structure.value):

        timestamps_structure = units_ses[units_ses.structure_full_name == _structure_name]['spike_times']

        # create flat list of all timestamps and list of unit numbers indicating which cell spiked
        unit_nrs_timestamps = []
        timestamps_structure_flat = []
        iunit = 0
        for unit_id, unit_timestamps in timestamps_structure.items():
            unit_nrs_timestamps.extend(np.zeros(len(unit_timestamps))+iunit)
            timestamps_structure_flat.extend(unit_timestamps)
            iunit += 1

        unit_nrs_timestamps = np.array(unit_nrs_timestamps)
        timestamps_structure_flat = np.array(timestamps_structure_flat)

        # select time window to plot
        time_start_window = 999
        time_stop_window = 1000
        mask_window = np.logical_and(timestamps_structure_flat > time_start_window, 
                                     timestamps_structure_flat < time_stop_window)

        plt.plot((timestamps_structure_flat[mask_window]-time_start_window)*1E3, 
                 unit_nrs_timestamps[mask_window]+n_units_allstructs, 
                 '|', 
                 label =_structure_name)
        n_units_allstructs += unit_nrs_timestamps[-1]
    plt.title('Raster plot of spiking neurons in different areas')
    plt.xlabel('Time (milliseconds)')
    plt.ylabel('Neuron #')
    plt.legend(bbox_to_anchor = (1.1,0.9))
    return (
        iunit,
        mask_window,
        n_units_allstructs,
        time_start_window,
        time_stop_window,
        timestamps_structure,
        timestamps_structure_flat,
        unit_id,
        unit_nrs_timestamps,
        unit_timestamps,
    )


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Further data exploration

        Use marimo's data explorer below to look into the firing rate and stimulus data.
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""### Firing rate data""")
    return


@app.cell
def _(mo, units_ses):
    mo.ui.data_explorer(units_ses['firing_rate'])
    return


@app.cell
def _():
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        ### Stimulus data

        Below, you can look into what kinds of images (visual stimulus) were shown to the mouse.
        """
    )
    return


@app.cell
def _(data_dir, mo, os, pd):
    # load stimulus data
    _filename = 'stimuli.parquet'
    _loadpath = os.path.join(data_dir, _filename)
    stimuli_ses = pd.read_parquet(_loadpath)

    mo.ui.data_explorer(stimuli_ses['stimulus_name'])
    return (stimuli_ses,)


@app.cell
def _():
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(r"""### Explore data on the mouse's running speed""")
    return


@app.cell
def _(data_dir, os, pd):
    _filename = 'running.parquet'
    _loadpath = os.path.join(data_dir, _filename)
    running_ses = pd.read_parquet(_loadpath)
    return (running_ses,)


@app.cell
def _(mo, running_ses):
    mo.ui.data_explorer(running_ses)
    return


@app.cell
def _():
    return


if __name__ == "__main__":
    app.run()
